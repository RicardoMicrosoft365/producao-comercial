/**
 * Script para manipula√ß√£o direta de vendedores no banco de dados
 * Este arquivo pode ser executado diretamente para adicionar, atualizar ou remover vendedores
 */

const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');

// Caminho para o banco de dados
const DB_DIR = path.join(process.cwd(), 'database');
const DB_PATH = path.join(DB_DIR, 'transportes.db');

// Garantir que o diret√≥rio existe
if (!fs.existsSync(DB_DIR)) {
  console.log(`üî® Criando diret√≥rio do banco de dados: ${DB_DIR}`);
  fs.mkdirSync(DB_DIR, { recursive: true });
}

/**
 * Conecta ao banco de dados
 * @returns {Promise<sqlite3.Database>} Conex√£o com o banco de dados
 */
function conectarBanco() {
  return new Promise((resolve, reject) => {
    console.log(`üîå Conectando ao banco de dados em: ${DB_PATH}`);
    const db = new sqlite3.Database(DB_PATH, (err) => {
      if (err) {
        console.error('‚ùå Erro ao conectar ao banco de dados:', err.message);
        reject(err);
      } else {
        console.log('‚úÖ Conectado ao banco de dados SQLite');
        resolve(db);
      }
    });
  });
}

/**
 * Fecha a conex√£o com o banco de dados
 * @param {sqlite3.Database} db - Conex√£o com o banco de dados
 * @returns {Promise<void>}
 */
function fecharBanco(db) {
  return new Promise((resolve, reject) => {
    if (!db) {
      resolve();
      return;
    }
    
    db.close((err) => {
      if (err) {
        console.error('‚ùå Erro ao fechar banco de dados:', err.message);
        reject(err);
      } else {
        console.log('üîå Conex√£o com o banco de dados fechada');
        resolve();
      }
    });
  });
}

/**
 * Cria a tabela de vendedores se n√£o existir
 * @param {sqlite3.Database} db - Conex√£o com o banco de dados
 * @returns {Promise<void>}
 */
function criarTabelaVendedores(db) {
  return new Promise((resolve, reject) => {
    db.run(`
      CREATE TABLE IF NOT EXISTS vendedores (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT NOT NULL UNIQUE
      )
    `, (err) => {
      if (err) {
        console.error('‚ùå Erro ao criar tabela de vendedores:', err.message);
        reject(err);
      } else {
        console.log('‚úÖ Tabela de vendedores verificada/criada com sucesso');
        resolve();
      }
    });
  });
}

/**
 * Verifica se j√° existem vendedores no banco de dados
 * @param {sqlite3.Database} db - Conex√£o com o banco de dados
 * @returns {Promise<number>} N√∫mero de vendedores
 */
function contarVendedores(db) {
  return new Promise((resolve, reject) => {
    db.get('SELECT COUNT(*) as count FROM vendedores', (err, row) => {
      if (err) {
        console.error('‚ùå Erro ao contar vendedores:', err.message);
        reject(err);
      } else {
        console.log(`‚ÑπÔ∏è Total de vendedores: ${row.count}`);
        resolve(row.count);
      }
    });
  });
}

/**
 * Insere vendedores padr√£o no banco de dados
 * @param {sqlite3.Database} db - Conex√£o com o banco de dados
 * @returns {Promise<void>}
 */
async function inserirVendedoresPadrao(db) {
  const vendedoresPadrao = [
    'Am√©lia Oliveira',
    'Fernando Ribeiro',
    'Agustinho Ormeneze',
    'Sandro Roberto',
    'Alex Borges',
    'Clovis Cunha',
    'Fabio Rosa',
    'Evandro Lima',
    'Rog√©rio Silva'
  ];
  
  console.log(`‚ÑπÔ∏è Inserindo ${vendedoresPadrao.length} vendedores padr√£o...`);
  
  return new Promise((resolve, reject) => {
    db.run('BEGIN TRANSACTION', async (err) => {
      if (err) {
        console.error('‚ùå Erro ao iniciar transa√ß√£o:', err.message);
        reject(err);
        return;
      }
      
      try {
        for (const nome of vendedoresPadrao) {
          await new Promise((resolveInsert, rejectInsert) => {
            db.run('INSERT OR IGNORE INTO vendedores (nome) VALUES (?)', [nome], (err) => {
              if (err) {
                console.error(`‚ùå Erro ao inserir vendedor "${nome}":`, err.message);
                rejectInsert(err);
              } else {
                console.log(`‚úÖ Vendedor "${nome}" inserido ou j√° existente`);
                resolveInsert();
              }
            });
          });
        }
        
        db.run('COMMIT', (err) => {
          if (err) {
            console.error('‚ùå Erro ao finalizar transa√ß√£o:', err.message);
            reject(err);
          } else {
            console.log('‚úÖ Vendedores padr√£o inseridos com sucesso');
            resolve();
          }
        });
      } catch (error) {
        db.run('ROLLBACK', () => {
          console.error('‚ùå Transa√ß√£o revertida devido a erro:', error.message);
          reject(error);
        });
      }
    });
  });
}

/**
 * Adiciona um novo vendedor
 * @param {sqlite3.Database} db - Conex√£o com o banco de dados
 * @param {string} nome - Nome do vendedor
 * @returns {Promise<number>} ID do vendedor inserido
 */
function adicionarVendedor(db, nome) {
  return new Promise((resolve, reject) => {
    if (!nome || nome.trim() === '') {
      reject(new Error('Nome do vendedor √© obrigat√≥rio'));
      return;
    }
    
    db.run('INSERT INTO vendedores (nome) VALUES (?)', [nome.trim()], function(err) {
      if (err) {
        // Se o erro for de chave duplicada, informar que o vendedor j√° existe
        if (err.message.includes('UNIQUE constraint failed')) {
          console.error(`‚ùå Vendedor "${nome}" j√° existe`);
          reject(new Error(`Vendedor "${nome}" j√° existe`));
        } else {
          console.error(`‚ùå Erro ao adicionar vendedor "${nome}":`, err.message);
          reject(err);
        }
      } else {
        console.log(`‚úÖ Vendedor "${nome}" adicionado com ID ${this.lastID}`);
        resolve(this.lastID);
      }
    });
  });
}

/**
 * Lista todos os vendedores
 * @param {sqlite3.Database} db - Conex√£o com o banco de dados
 * @returns {Promise<Array>} Lista de vendedores
 */
function listarVendedores(db) {
  return new Promise((resolve, reject) => {
    db.all('SELECT id, nome FROM vendedores ORDER BY nome', (err, rows) => {
      if (err) {
        console.error('‚ùå Erro ao listar vendedores:', err.message);
        reject(err);
      } else {
        console.log(`‚úÖ ${rows.length} vendedores encontrados`);
        resolve(rows);
      }
    });
  });
}

/**
 * Busca vendedores por nome
 * @param {sqlite3.Database} db - Conex√£o com o banco de dados
 * @param {string} termo - Termo de busca
 * @returns {Promise<Array>} Lista de vendedores encontrados
 */
function buscarVendedores(db, termo) {
  return new Promise((resolve, reject) => {
    if (!termo || termo.trim() === '') {
      return listarVendedores(db).then(resolve).catch(reject);
    }
    
    const termoBusca = `%${termo.trim()}%`;
    db.all('SELECT id, nome FROM vendedores WHERE nome LIKE ? ORDER BY nome', [termoBusca], (err, rows) => {
      if (err) {
        console.error(`‚ùå Erro ao buscar vendedores com termo "${termo}":`, err.message);
        reject(err);
      } else {
        console.log(`‚úÖ ${rows.length} vendedores encontrados com o termo "${termo}"`);
        resolve(rows);
      }
    });
  });
}

/**
 * Atualiza o nome de um vendedor
 * @param {sqlite3.Database} db - Conex√£o com o banco de dados
 * @param {number} id - ID do vendedor
 * @param {string} novoNome - Novo nome do vendedor
 * @returns {Promise<boolean>} Verdadeiro se a atualiza√ß√£o foi bem-sucedida
 */
function atualizarVendedor(db, id, novoNome) {
  return new Promise((resolve, reject) => {
    if (!id || isNaN(parseInt(id))) {
      reject(new Error('ID do vendedor inv√°lido'));
      return;
    }
    
    if (!novoNome || novoNome.trim() === '') {
      reject(new Error('Nome do vendedor √© obrigat√≥rio'));
      return;
    }
    
    db.run('UPDATE vendedores SET nome = ? WHERE id = ?', [novoNome.trim(), id], function(err) {
      if (err) {
        console.error(`‚ùå Erro ao atualizar vendedor com ID ${id}:`, err.message);
        reject(err);
      } else if (this.changes === 0) {
        console.error(`‚ùå Vendedor com ID ${id} n√£o encontrado`);
        reject(new Error(`Vendedor com ID ${id} n√£o encontrado`));
      } else {
        console.log(`‚úÖ Vendedor com ID ${id} atualizado para "${novoNome}"`);
        resolve(true);
      }
    });
  });
}

/**
 * Remove um vendedor
 * @param {sqlite3.Database} db - Conex√£o com o banco de dados
 * @param {number} id - ID do vendedor
 * @returns {Promise<boolean>} Verdadeiro se a remo√ß√£o foi bem-sucedida
 */
function removerVendedor(db, id) {
  return new Promise((resolve, reject) => {
    if (!id || isNaN(parseInt(id))) {
      reject(new Error('ID do vendedor inv√°lido'));
      return;
    }
    
    db.run('DELETE FROM vendedores WHERE id = ?', [id], function(err) {
      if (err) {
        console.error(`‚ùå Erro ao remover vendedor com ID ${id}:`, err.message);
        reject(err);
      } else if (this.changes === 0) {
        console.error(`‚ùå Vendedor com ID ${id} n√£o encontrado`);
        reject(new Error(`Vendedor com ID ${id} n√£o encontrado`));
      } else {
        console.log(`‚úÖ Vendedor com ID ${id} removido com sucesso`);
        resolve(true);
      }
    });
  });
}

/**
 * Fun√ß√£o principal que executa as opera√ß√µes b√°sicas
 */
async function main() {
  let db = null;
  
  try {
    // Conectar ao banco de dados
    db = await conectarBanco();
    
    // Criar tabela de vendedores se n√£o existir
    await criarTabelaVendedores(db);
    
    // Verificar se j√° existem vendedores
    const count = await contarVendedores(db);
    
    // Se n√£o houver vendedores, inserir os padr√£o
    if (count === 0) {
      await inserirVendedoresPadrao(db);
    }
    
    // Listar todos os vendedores
    const vendedores = await listarVendedores(db);
    console.table(vendedores);
    
    // Exemplos de uso (comentados para n√£o executar por padr√£o)
    /*
    // Adicionar um novo vendedor
    const novoId = await adicionarVendedor(db, 'Jo√£o Silva');
    console.log(`Novo vendedor adicionado com ID: ${novoId}`);
    
    // Buscar vendedores com "Silva" no nome
    const resultadoBusca = await buscarVendedores(db, 'Silva');
    console.table(resultadoBusca);
    
    // Atualizar um vendedor
    await atualizarVendedor(db, novoId, 'Jo√£o Silva Junior');
    
    // Remover um vendedor
    await removerVendedor(db, novoId);
    */
    
  } catch (error) {
    console.error('‚ùå Erro durante a execu√ß√£o:', error.message);
  } finally {
    // Fechar a conex√£o com o banco de dados
    if (db) {
      await fecharBanco(db);
    }
  }
}

// Executar a fun√ß√£o principal se este arquivo for executado diretamente
if (require.main === module) {
  main().catch(console.error);
}

// Exportar fun√ß√µes para uso em outros scripts
module.exports = {
  conectarBanco,
  fecharBanco,
  criarTabelaVendedores,
  contarVendedores,
  inserirVendedoresPadrao,
  adicionarVendedor,
  listarVendedores,
  buscarVendedores,
  atualizarVendedor,
  removerVendedor
}; 